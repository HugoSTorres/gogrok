// Code generated by protoc-gen-go.
// source: message.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
	SnifferParams
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A message is just the string form of the HTTP request.
type Message struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// For now, this one takes nothing
type SnifferParams struct {
}

func (m *SnifferParams) Reset()                    { *m = SnifferParams{} }
func (m *SnifferParams) String() string            { return proto.CompactTextString(m) }
func (*SnifferParams) ProtoMessage()               {}
func (*SnifferParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*SnifferParams)(nil), "pb.SnifferParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Sniffer service

type SnifferClient interface {
	Connect(ctx context.Context, in *SnifferParams, opts ...grpc.CallOption) (Sniffer_ConnectClient, error)
}

type snifferClient struct {
	cc *grpc.ClientConn
}

func NewSnifferClient(cc *grpc.ClientConn) SnifferClient {
	return &snifferClient{cc}
}

func (c *snifferClient) Connect(ctx context.Context, in *SnifferParams, opts ...grpc.CallOption) (Sniffer_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sniffer_serviceDesc.Streams[0], c.cc, "/pb.Sniffer/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &snifferConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sniffer_ConnectClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type snifferConnectClient struct {
	grpc.ClientStream
}

func (x *snifferConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sniffer service

type SnifferServer interface {
	Connect(*SnifferParams, Sniffer_ConnectServer) error
}

func RegisterSnifferServer(s *grpc.Server, srv SnifferServer) {
	s.RegisterService(&_Sniffer_serviceDesc, srv)
}

func _Sniffer_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnifferParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnifferServer).Connect(m, &snifferConnectServer{stream})
}

type Sniffer_ConnectServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type snifferConnectServer struct {
	grpc.ServerStream
}

func (x *snifferConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Sniffer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sniffer",
	HandlerType: (*SnifferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Sniffer_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe5,
	0x62, 0xf7, 0x85, 0x08, 0x0a, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xfc, 0x5c, 0xbc, 0xc1, 0x79, 0x99, 0x69, 0x69, 0xa9, 0x45,
	0x01, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x46, 0x16, 0x5c, 0xec, 0x50, 0x01, 0x21, 0x5d, 0x2e, 0x76,
	0xe7, 0xfc, 0xbc, 0xbc, 0xd4, 0xe4, 0x12, 0x21, 0x41, 0xbd, 0x82, 0x24, 0x3d, 0x14, 0x85, 0x52,
	0xdc, 0x20, 0x21, 0xa8, 0xd1, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x4b, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xee, 0x26, 0x0a, 0x58, 0x85, 0x00, 0x00, 0x00,
}
